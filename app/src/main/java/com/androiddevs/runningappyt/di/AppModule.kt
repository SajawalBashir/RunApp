package com.androiddevs.runningappyt.di

import android.content.Context
import android.content.Context.MODE_PRIVATE
import android.content.SharedPreferences
import androidx.room.Room
import com.androiddevs.runningappyt.db.RunningDatabase
import com.androiddevs.runningappyt.other.Const.KEY_FIRST_TIME_TOGGLE
import com.androiddevs.runningappyt.other.Const.KEY_NAME
import com.androiddevs.runningappyt.other.Const.KEY_WEIGHT
import com.androiddevs.runningappyt.other.Const.RUNNING_DATABASE_NAME
import com.androiddevs.runningappyt.other.Const.SHARED_PREFERENCES_NAME
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ActivityComponent
import dagger.hilt.android.components.ApplicationComponent
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Singleton

@Module    // is me hum dagger ko bataty hain k dependencies kis tarha banani ha. @Module is an annotation used to mark a class that provides dependencies to the dependency graph(see pic android -> s.s -> 116b)

@InstallIn(ApplicationComponent::class)  // Application Component ki jaga Activity component, Fragment Component, Service Component wagera bhi likh skty hai. @InstallIn(ApplicationComponent::class) annotation in the module code tells Hilt to install the AppModule module in the ApplicationComponent class. The ApplicationComponent class is generated by Hilt at compile-time and provides dependencies that have application-level scope. By installing modules in the ApplicationComponent, we can provide dependencies that are available throughout the entire application.
object AppModule {

    @Singleton   //  This annotation specifies that the instance returned by this method should be a singleton.
    @Provides    //  This annotation is used to indicate that this method provides a dependency.
    fun provideRunningDatabase(
        @ApplicationContext app: Context
    ) = Room.databaseBuilder(
        app,
        RunningDatabase::class.java,
        RUNNING_DATABASE_NAME
    ).build()

    @Singleton
    @Provides
    fun provideRunDao(db: RunningDatabase) = db.getRunDao()

    @Singleton
    @Provides
    fun provideSharedPreferences(@ApplicationContext app: Context) =
        app.getSharedPreferences(SHARED_PREFERENCES_NAME, MODE_PRIVATE)

    @Singleton
    @Provides
    fun provideName(sharedPref: SharedPreferences) = sharedPref.getString(KEY_NAME, "") ?: ""

    @Singleton
    @Provides
    fun provideWeight(sharedPref: SharedPreferences) = sharedPref.getFloat(KEY_WEIGHT, 80f)

    @Singleton
    @Provides
    fun provideFirstTimeToggle(sharedPref: SharedPreferences) =
        sharedPref.getBoolean(KEY_FIRST_TIME_TOGGLE, true)

}







